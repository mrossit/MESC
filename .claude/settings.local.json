{
  "permissions": {
    "allow": [
      "Bash(mkdir:*)",
      "Bash(cp:*)",
      "Bash(curl:*)",
      "Bash(npm run dev:*)",
      "Bash(npm install:*)",
      "Bash(sed:*)",
      "Bash(npm run:*)",
      "Bash(npx shadcn@latest add:*)",
      "Bash(npx shadcn@latest:*)",
      "Bash(pkill:*)",
      "Bash(npx drizzle-kit:*)",
      "Bash(npx tsx:*)",
      "Bash(kill:*)",
      "mcp__shadcn__search_items_in_registries",
      "mcp__shadcn__view_items_in_registries",
      "mcp__shadcn__get_item_examples_from_registries",
      "mcp__shadcn__get_add_command_for_items",
      "Bash(cat:*)",
      "Bash(lsof:*)",
      "Bash(netstat:*)",
      "Bash(tree:*)",
      "Bash(/nix/store/lz7iav1hd92jbv44zf2rdd7b2mj23536-nodejs-20.19.3/bin/node node_modules/.bin/tsx:*)",
      "Bash(chmod:*)",
      "Bash(NODE_ENV=development /nix/store/lz7iav1hd92jbv44zf2rdd7b2mj23536-nodejs-20.19.3/bin/node node_modules/.bin/tsx server/index.ts)",
      "Bash(env NODE_ENV=development /nix/store/lz7iav1hd92jbv44zf2rdd7b2mj23536-nodejs-20.19.3/bin/node node_modules/.bin/tsx server/index.ts)",
      "Bash(git log:*)",
      "Bash(echo $PORT)",
      "Bash(echo:*)",
      "Bash(openssl rand:*)",
      "Bash(python3:*)",
      "Bash(NODE_ENV=production npx tsx scripts/create-production-user.ts)",
      "Bash(NODE_ENV=production npm start)",
      "Bash(PORT=5001 npm run dev)",
      "Bash(sqlite3:*)",
      "Read(//tmp/**)",
      "Bash(psql:*)",
      "Bash(for file in client/src/pages/*.tsx)",
      "Bash(do grep -l \"<Layout\" \"$file\")",
      "Bash(xargs:*)",
      "Bash(npx kill-port:*)",
      "Bash(NODE_ENV=production npx tsx scripts/test-db-connection.ts)",
      "Bash(NODE_ENV=production npx tsx scripts/test-api-production.ts)",
      "Bash(NODE_ENV=production npx tsx scripts/check-user-status.ts)",
      "Bash(NODE_ENV=production npx tsx scripts/test-auth-debug.ts)",
      "Bash(NODE_ENV=production npx tsx scripts/test-schedule-generation.ts)",
      "Bash(NODE_ENV=development npm run dev)",
      "Bash(NODE_ENV=production npx tsx scripts/check-ministers-data.ts)",
      "Bash(NODE_ENV=production npx tsx scripts/setup-mass-times.ts)",
      "Bash(NODE_ENV=production npx tsx scripts/check-availability-issues.ts)",
      "Bash(NODE_ENV=production npx tsx scripts/check-all-questionnaires.ts)",
      "Bash(NODE_ENV=production npx tsx scripts/check-october-questionnaire.ts)",
      "Bash(NODE_ENV=production npx tsx scripts/list-all-questionnaires.ts)",
      "Bash(NODE_ENV=production npx tsx scripts/check-real-october-data.ts)",
      "Bash(NODE_ENV=production npx tsx scripts/check-any-questionnaire.ts)",
      "Bash(NODE_ENV=production npx tsx scripts/check-database-tables.ts)",
      "Bash(npx tsc:*)",
      "Bash(NODE_ENV=production npx tsx scripts/test-csv-export.ts)",
      "Bash(NODE_ENV=production npx tsx scripts/test-csv-export-full.ts)",
      "Bash(NODE_ENV=production npx tsx scripts/check-response-structure.ts)",
      "Bash(NODE_ENV=production npx tsx scripts/inspect-real-data.ts)",
      "Bash(NODE_ENV=production npx tsx scripts/verify-csv-export.ts)",
      "Bash(env NODE_ENV=production npx tsx:*)",
      "Bash(1)",
      "Bash(NODE_ENV=production npx tsx scripts/analyze-schedule-data.ts)",
      "Bash(NODE_ENV=production npx tsx scripts/test-schedules-api.ts)",
      "Bash(node:*)",
      "Read(//home/runner/**)",
      "Bash(NODE_ENV=production npx tsx scripts/fix-schedule-positions.ts)",
      "Bash(awk:*)",
      "Bash(NODE_ENV=production npx tsx scripts/debug-schedule-edit.ts)",
      "Bash(grep:*)",
      "Bash(find:*)",
      "Bash(npx vitest run:*)",
      "Bash(npm test:*)",
      "Bash(NODE_ENV=production npx tsx scripts/check-schedule-assignments.ts)"
    ],
    "deny": [],
    "ask": []
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "shadcn"
  ]
}