{
  "permissions": {
    "allow": [
      "Bash(sqlite3:*)",
      "Bash(export NODE_ENV=production)",
      "Bash(npx tsx:*)",
      "Bash(echo $PORT)",
      "Bash(xargs:*)",
      "Bash(find:*)",
      "Read(//home/runner/gluestack-mcp/**)",
      "Bash(npm run build:*)",
      "Read(//home/runner/**)",
      "Bash(npm install:*)",
      "Bash(node:*)",
      "Bash(npm run check:*)",
      "Bash(curl:*)",
      "mcp__shadcn__get_add_command_for_items",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:gluestack.io)",
      "Bash(git clone:*)",
      "Bash(npm run dev:*)",
      "Bash(npx xlsx:*)",
      "Bash(psql:*)",
      "Bash(npx tsc:*)",
      "Bash(lsof:*)",
      "Bash(pkill:*)",
      "Read(//tmp/**)",
      "Bash(cat:*)",
      "Bash(kill:*)",
      "Bash(awk:*)",
      "Bash(npm run:*)",
      "Bash(fuser:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git restore:*)",
      "Bash(npx esbuild:*)",
      "Bash(tree:*)",
      "Bash(mkdir:*)",
      "Bash(mv:*)",
      "WebSearch",
      "WebFetch(domain:www.testsprite.com)",
      "WebFetch(domain:www.npmjs.com)",
      "Bash(npx testsprite:*)",
      "WebFetch(domain:docs.testsprite.com)",
      "Bash(netstat:*)",
      "Bash(ss:*)",
      "Bash(killall:*)",
      "Bash(echo $REPL_SLUG)",
      "Bash(env)",
      "Bash(chmod:*)",
      "Bash(/home/runner/workspace/fix-schedules-errors.sh:*)",
      "Bash(echo $DATABASE_URL)",
      "Bash(claude --version)",
      "Bash(npx drizzle-kit generate:*)",
      "Bash(bash scripts/refactoring-tools.sh:*)",
      "Bash(while read file)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(done)",
      "Bash(for file in pagination drawer breadcrumb carousel sortable-table-header)",
      "Bash(do)",
      "Bash(if [ -f \"client/src/components/ui/$file.tsx\" ])",
      "Bash(then)",
      "Bash(else)",
      "Bash(echo:*)",
      "Bash(fi)",
      "Bash(NODE_ENV=development npx tsx:*)",
      "Bash(tee:*)",
      "Bash(timeout:*)",
      "Bash(journalctl:*)",
      "Bash(npm start)",
      "Bash(python3:*)",
      "Bash(NODE_ENV=production npx tsx:*)",
      "Bash(NODE_ENV=development PRODUCTION_DATABASE_URL=\"postgresql://neondb_owner:npg_3QKylioran9V@ep-lingering-firefly-afak5e6q.c-2.us-west-2.aws.neon.tech/neondb?sslmode=require\" npx tsx:*)",
      "Bash(PGPASSWORD=\"$DATABASE_URL#*://*/\" psql \"$DATABASE_URL\" -f migrations/add-position-preferences.sql)",
      "Bash(PGPASSWORD=\"npg_3QKylioran9V\" psql \"postgresql://neondb_owner:npg_3QKylioran9V@ep-lingering-firefly-afak5e6q.c-2.us-west-2.aws.neon.tech/neondb?sslmode=require\" -c \"ALTER TABLE users ADD COLUMN IF NOT EXISTS preferred_positions jsonb DEFAULT ''[]''::jsonb, ADD COLUMN IF NOT EXISTS avoid_positions jsonb DEFAULT ''[]''::jsonb;\")",
      "Bash(PGPASSWORD=\"npg_3QKylioran9V\" psql \"postgresql://neondb_owner:npg_3QKylioran9V@ep-lingering-firefly-afak5e6q.c-2.us-west-2.aws.neon.tech/neondb?sslmode=require\" -c \"COMMENT ON COLUMN users.preferred_positions IS ''Array of up to 5 preferred liturgical positions for this minister''; COMMENT ON COLUMN users.avoid_positions IS ''Array of up to 5 liturgical positions to avoid for this minister'';\")",
      "WebFetch(domain:www.vatican.va)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://neondb_owner:npg_3QKylioran9V@ep-lingering-firefly-afak5e6q.c-2.us-west-2.aws.neon.tech/neondb?sslmode=require\" npx tsx scripts/populate-formation-content.ts)",
      "Bash(PGPASSWORD=\"npg_3QKylioran9V\" psql \"postgresql://neondb_owner:npg_3QKylioran9V@ep-lingering-firefly-afak5e6q.c-2.us-west-2.aws.neon.tech/neondb?sslmode=require\" -c \"SELECT COUNT(*) as tracks FROM formation_tracks; SELECT COUNT(*) as modules FROM formation_modules; SELECT COUNT(*) as lessons FROM formation_lessons; SELECT COUNT(*) as sections FROM formation_lesson_sections;\")",
      "Bash(PGPASSWORD=\"npg_3QKylioran9V\" psql \"postgresql://neondb_owner:npg_3QKylioran9V@ep-lingering-firefly-afak5e6q.c-2.us-west-2.aws.neon.tech/neondb?sslmode=require\" -c \"SELECT t.title, COUNT(DISTINCT m.id) as modules, COUNT(DISTINCT l.id) as lessons, COUNT(DISTINCT s.id) as sections FROM formation_tracks t LEFT JOIN formation_modules m ON t.id = m.track_id LEFT JOIN formation_lessons l ON m.id = l.module_id LEFT JOIN formation_lesson_sections s ON l.id = s.lesson_id GROUP BY t.id, t.title;\")"
    ],
    "deny": [],
    "ask": []
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "shadcn"
  ]
}
