#!/usr/bin/env tsx

/**
 * Script de Migra√ß√£o - Criptografia de Dados Religiosos
 *
 * LGPD Art. 11: Dados religiosos s√£o considerados SENS√çVEIS
 * Este script criptografa campos sacramentais existentes no banco
 *
 * Uso:
 *   npm run tsx scripts/encrypt-religious-data.ts
 *
 * IMPORTANTE:
 * - Execute ANTES em ambiente de teste
 * - Fa√ßa BACKUP do banco antes de executar
 * - Tenha ENCRYPTION_KEY configurado no .env
 */

import { db } from '../server/db';
import { users } from '@shared/schema';
import { encrypt, decrypt, isEncrypted, testEncryption } from '../server/utils/encryption';
import { eq } from 'drizzle-orm';

async function encryptReligiousData() {
  console.log('üîê ========================================');
  console.log('üîê MIGRA√á√ÉO: Criptografia de Dados Religiosos');
  console.log('üîê ========================================\n');

  // 1. Testar criptografia primeiro
  console.log('1Ô∏è‚É£  Testando sistema de criptografia...');
  const testPassed = testEncryption();

  if (!testPassed) {
    console.error('‚ùå Teste de criptografia falhou!');
    console.error('‚ùå Verifique se ENCRYPTION_KEY est√° configurado corretamente no .env');
    process.exit(1);
  }

  console.log('‚úÖ Sistema de criptografia OK\n');

  // 2. Buscar todos os usu√°rios
  console.log('2Ô∏è‚É£  Buscando usu√°rios...');
  const allUsers = await db.select().from(users);
  console.log(`‚úÖ Encontrados ${allUsers.length} usu√°rios\n`);

  // 3. Analisar dados
  let totalFieldsToEncrypt = 0;
  let alreadyEncrypted = 0;
  let empty = 0;

  console.log('3Ô∏è‚É£  Analisando dados...');

  for (const user of allUsers) {
    const fields = [
      user.baptismParish,
      user.confirmationParish,
      user.marriageParish
    ];

    for (const field of fields) {
      if (!field) {
        empty++;
      } else if (isEncrypted(field)) {
        alreadyEncrypted++;
      } else {
        totalFieldsToEncrypt++;
      }
    }
  }

  console.log(`   Total de campos: ${allUsers.length * 3}`);
  console.log(`   Vazios: ${empty}`);
  console.log(`   J√° criptografados: ${alreadyEncrypted}`);
  console.log(`   A criptografar: ${totalFieldsToEncrypt}\n`);

  if (totalFieldsToEncrypt === 0) {
    console.log('‚úÖ Todos os dados j√° est√£o criptografados ou vazios!');
    console.log('‚úÖ Nenhuma a√ß√£o necess√°ria.');
    process.exit(0);
  }

  // 4. Confirmar execu√ß√£o
  console.log('‚ö†Ô∏è  ========================================');
  console.log(`‚ö†Ô∏è  ATEN√á√ÉO: Ir√° criptografar ${totalFieldsToEncrypt} campos`);
  console.log('‚ö†Ô∏è  Esta opera√ß√£o modifica o banco de dados!');
  console.log('‚ö†Ô∏è  ========================================\n');

  // 5. Executar criptografia
  console.log('4Ô∏è‚É£  Iniciando criptografia...\n');

  let usersUpdated = 0;
  let fieldsEncrypted = 0;
  const errors: Array<{ userId: string; field: string; error: string }> = [];

  for (const user of allUsers) {
    const updates: Partial<typeof user> = {};
    let userNeedsUpdate = false;

    // Verificar e criptografar baptismParish
    if (user.baptismParish && !isEncrypted(user.baptismParish)) {
      try {
        updates.baptismParish = encrypt(user.baptismParish);
        userNeedsUpdate = true;
        fieldsEncrypted++;
        console.log(`   ‚úì ${user.email}: baptismParish`);
      } catch (error: any) {
        errors.push({
          userId: user.id,
          field: 'baptismParish',
          error: error.message
        });
      }
    }

    // Verificar e criptografar confirmationParish
    if (user.confirmationParish && !isEncrypted(user.confirmationParish)) {
      try {
        updates.confirmationParish = encrypt(user.confirmationParish);
        userNeedsUpdate = true;
        fieldsEncrypted++;
        console.log(`   ‚úì ${user.email}: confirmationParish`);
      } catch (error: any) {
        errors.push({
          userId: user.id,
          field: 'confirmationParish',
          error: error.message
        });
      }
    }

    // Verificar e criptografar marriageParish
    if (user.marriageParish && !isEncrypted(user.marriageParish)) {
      try {
        updates.marriageParish = encrypt(user.marriageParish);
        userNeedsUpdate = true;
        fieldsEncrypted++;
        console.log(`   ‚úì ${user.email}: marriageParish`);
      } catch (error: any) {
        errors.push({
          userId: user.id,
          field: 'marriageParish',
          error: error.message
        });
      }
    }

    // Atualizar usu√°rio se houver mudan√ßas
    if (userNeedsUpdate) {
      try {
        await db
          .update(users)
          .set({ ...updates, updatedAt: new Date() })
          .where(eq(users.id, user.id));

        usersUpdated++;
      } catch (error: any) {
        console.error(`   ‚ùå Erro ao atualizar ${user.email}:`, error.message);
        errors.push({
          userId: user.id,
          field: 'update',
          error: error.message
        });
      }
    }
  }

  // 6. Resumo final
  console.log('\nüîê ========================================');
  console.log('üîê RESUMO DA MIGRA√á√ÉO');
  console.log('üîê ========================================');
  console.log(`‚úÖ Usu√°rios atualizados: ${usersUpdated}`);
  console.log(`‚úÖ Campos criptografados: ${fieldsEncrypted}`);

  if (errors.length > 0) {
    console.log(`\n‚ùå Erros encontrados: ${errors.length}`);
    console.log('\nDetalhes dos erros:');
    errors.forEach((err, idx) => {
      console.log(`   ${idx + 1}. User ${err.userId} - ${err.field}: ${err.error}`);
    });
  } else {
    console.log('\n‚úÖ Nenhum erro encontrado!');
  }

  // 7. Verificar resultado
  console.log('\n5Ô∏è‚É£  Verificando resultado...');

  const updatedUsers = await db.select().from(users);
  let verificationPassed = true;

  for (const user of updatedUsers) {
    const fields = [
      { name: 'baptismParish', value: user.baptismParish },
      { name: 'confirmationParish', value: user.confirmationParish },
      { name: 'marriageParish', value: user.marriageParish }
    ];

    for (const field of fields) {
      // Se o campo tem valor, deve estar criptografado
      if (field.value && !isEncrypted(field.value)) {
        console.error(`‚ùå ${user.email}.${field.name} N√ÉO est√° criptografado!`);
        verificationPassed = false;
      }
    }
  }

  if (verificationPassed) {
    console.log('‚úÖ Verifica√ß√£o PASSOU! Todos os dados sens√≠veis est√£o criptografados.\n');
  } else {
    console.error('‚ùå Verifica√ß√£o FALHOU! Alguns dados n√£o foram criptografados.\n');
    process.exit(1);
  }

  console.log('üîê ========================================');
  console.log('üîê MIGRA√á√ÉO CONCLU√çDA COM SUCESSO!');
  console.log('üîê ========================================\n');

  console.log('üìù Pr√≥ximos passos:');
  console.log('   1. Verificar os dados criptografados no banco');
  console.log('   2. Testar a aplica√ß√£o para garantir que a descriptografia funciona');
  console.log('   3. Documentar a migra√ß√£o realizada');
  console.log('   4. Fazer backup do banco p√≥s-migra√ß√£o\n');

  process.exit(0);
}

// Executar migra√ß√£o
encryptReligiousData().catch((error) => {
  console.error('\n‚ùå ERRO FATAL:', error);
  console.error('\n‚ùå Migra√ß√£o abortada!');
  process.exit(1);
});
