import fetch from 'node-fetch';

async function testPasswordReset() {
  const baseUrl = 'http://localhost:5000';

  try {
    console.log('üß™ Testando sistema de recupera√ß√£o de senha...\n');

    // Testar solicita√ß√£o de reset de senha
    console.log('1. Solicitando reset de senha para ana.silva@test.com...');
    const resetResponse = await fetch(`${baseUrl}/api/password-reset/request-reset`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: 'ana.silva@test.com',
        reason: 'Teste do sistema'
      })
    });

    const resetData = await resetResponse.json();

    if (resetResponse.ok) {
      console.log('‚úÖ Solicita√ß√£o enviada com sucesso!');
      console.log('üìù Mensagem retornada:', resetData.message);
    } else {
      console.log('‚ùå Erro na solicita√ß√£o:', resetData.message);
    }

    // Verificar se as notifica√ß√µes foram criadas
    console.log('\n2. Verificando notifica√ß√µes criadas...');

    // Login como coordenador para verificar notifica√ß√µes
    const loginResponse = await fetch(`${baseUrl}/api/auth/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: 'coordenador@test.com',
        password: 'senha123'
      })
    });

    if (loginResponse.ok) {
      const cookies = loginResponse.headers.get('set-cookie');

      // Buscar notifica√ß√µes
      const notifResponse = await fetch(`${baseUrl}/api/notifications`, {
        headers: { 'Cookie': cookies! }
      });

      if (notifResponse.ok) {
        const notifications = await notifResponse.json();
        const passwordNotifications = notifications.filter((n: any) =>
          n.title === 'Solicita√ß√£o de Nova Senha'
        );

        console.log(`‚úÖ Encontradas ${passwordNotifications.length} notifica√ß√µes de senha`);

        if (passwordNotifications.length > 0) {
          console.log('\n√öltima notifica√ß√£o:');
          const lastNotif = passwordNotifications[0];
          console.log('- T√≠tulo:', lastNotif.title);
          console.log('- Mensagem:', lastNotif.message);
          console.log('- Prioridade:', lastNotif.priority);
          console.log('- Lida:', lastNotif.read ? 'Sim' : 'N√£o');
        }
      }
    }

    // Testar solicita√ß√£o duplicada
    console.log('\n3. Testando preven√ß√£o de solicita√ß√µes duplicadas...');
    const duplicateResponse = await fetch(`${baseUrl}/api/password-reset/request-reset`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: 'ana.silva@test.com'
      })
    });

    const duplicateData = await duplicateResponse.json();

    if (!duplicateResponse.ok && duplicateData.message.includes('pendente')) {
      console.log('‚úÖ Sistema preveniu solicita√ß√£o duplicada corretamente');
    } else {
      console.log('‚ö†Ô∏è  Sistema permitiu solicita√ß√£o duplicada');
    }

    console.log('\n‚ú® Teste conclu√≠do!');
    console.log('\nüìä RESUMO:');
    console.log('- Notifica√ß√µes s√£o enviadas para coordenadores e gestores');
    console.log('- Mensagem personalizada √© exibida ao usu√°rio');
    console.log('- Sistema previne solicita√ß√µes duplicadas');
    console.log('- Prioridade alta √© definida para as notifica√ß√µes');

  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  }

  process.exit(0);
}

testPasswordReset();