import { db } from '../server/db.js';
import { questionnaires, questionnaireResponses, users } from '../shared/schema.js';
import { eq, and } from 'drizzle-orm';

async function checkRealOctoberData() {
  console.log('\nüîç VERIFICANDO DADOS REAIS DE OUTUBRO/2025 NO BANCO\n');
  console.log('=' .repeat(80));

  try {
    // 1. Buscar question√°rio de outubro/2025
    const octoberQuest = await db.select()
      .from(questionnaires)
      .where(
        and(
          eq(questionnaires.month, 10),
          eq(questionnaires.year, 2025)
        )
      );

    if (octoberQuest.length === 0) {
      console.log('‚ùå Nenhum question√°rio encontrado para outubro/2025');

      // Listar todos os question√°rios
      const allQuests = await db.select()
        .from(questionnaires);

      console.log('\nüìã Question√°rios existentes:');
      for (const q of allQuests) {
        console.log(`   - ${q.month}/${q.year} (ID: ${q.id}, Status: ${q.status})`);
      }
      return;
    }

    const questionnaire = octoberQuest[0];
    console.log('\n‚úÖ QUESTION√ÅRIO DE OUTUBRO ENCONTRADO!');
    console.log(`   ID: ${questionnaire.id}`);
    console.log(`   Status: ${questionnaire.status}`);
    console.log(`   Criado: ${questionnaire.createdAt}`);

    // 2. Buscar todas as respostas
    const responses = await db.select()
      .from(questionnaireResponses)
      .where(eq(questionnaireResponses.questionnaireId, questionnaire.id));

    console.log(`\nüìä Total de respostas: ${responses.length}`);

    // 3. Buscar dados dos ministros
    const allUsers = await db.select()
      .from(users);

    const userMap = new Map(allUsers.map(u => [u.id, { name: u.name, email: u.email }]));

    // 4. Analisar resposta da Roberta como exemplo
    console.log('\n\nüîç AN√ÅLISE DETALHADA - EXEMPLO: Roberta');
    console.log('-'.repeat(80));

    const robertaResponse = responses.find(r => {
      const user = userMap.get(r.userId);
      return user?.email === 'roberta.dellavitta@gmail.com';
    });

    if (robertaResponse) {
      const user = userMap.get(robertaResponse.userId)!;
      console.log(`\nüë§ ${user.name} (${user.email})`);
      console.log('\nDados da resposta:');

      // Mostrar estrutura completa
      console.log('\nüìå availableSundays:', JSON.stringify(robertaResponse.availableSundays, null, 2));
      console.log('üìå preferredMassTimes:', JSON.stringify(robertaResponse.preferredMassTimes, null, 2));
      console.log('üìå alternativeTimes:', JSON.stringify(robertaResponse.alternativeTimes, null, 2));
      console.log('üìå dailyMassAvailability:', JSON.stringify(robertaResponse.dailyMassAvailability, null, 2));
      console.log('üìå canSubstitute:', robertaResponse.canSubstitute);

      if (robertaResponse.specialEvents) {
        console.log('üìå specialEvents:', JSON.stringify(robertaResponse.specialEvents, null, 2));
      }

      console.log('\nüí° INTERPRETA√á√ÉO:');
      if (robertaResponse.preferredMassTimes?.includes('8h')) {
        console.log('   ‚úÖ Dispon√≠vel para missas das 8h');
      }
      if (robertaResponse.availableSundays && robertaResponse.availableSundays.length > 0) {
        console.log('   ‚úÖ Domingos dispon√≠veis:', robertaResponse.availableSundays.join(', '));
      }
    } else {
      console.log('‚ùå Resposta da Roberta n√£o encontrada');
    }

    // 5. Mostrar estrutura de outras respostas
    console.log('\n\nüìä AN√ÅLISE DE TODAS AS RESPOSTAS:');
    console.log('-'.repeat(80));

    for (const response of responses.slice(0, 5)) { // Mostrar apenas primeiras 5
      const user = userMap.get(response.userId);
      if (!user) continue;

      console.log(`\nüë§ ${user.name}`);
      console.log(`   Email: ${user.email}`);

      // Domingos dispon√≠veis
      if (response.availableSundays && response.availableSundays.length > 0) {
        console.log(`   Domingos: ${response.availableSundays.join(', ')}`);
      } else {
        console.log(`   Domingos: SEM RESPOSTA ou VAZIO`);
      }

      // Hor√°rios preferidos
      if (response.preferredMassTimes && response.preferredMassTimes.length > 0) {
        console.log(`   Hor√°rios preferidos: ${response.preferredMassTimes.join(', ')}`);
      } else {
        console.log(`   Hor√°rios preferidos: SEM RESPOSTA`);
      }

      // Missas di√°rias
      if (response.dailyMassAvailability && response.dailyMassAvailability.length > 0) {
        console.log(`   Missas di√°rias: ${response.dailyMassAvailability.join(', ')}`);
      } else {
        console.log(`   Missas di√°rias: SEM RESPOSTA`);
      }
    }

    // 6. Estat√≠sticas gerais
    console.log('\n\nüìà ESTAT√çSTICAS GERAIS:');
    console.log('-'.repeat(80));

    let comDomingos = 0;
    let semDomingos = 0;
    let comMissasDiarias = 0;
    let semMissasDiarias = 0;
    let comHorarioPreferido = 0;

    for (const r of responses) {
      if (r.availableSundays && r.availableSundays.length > 0) {
        comDomingos++;
      } else {
        semDomingos++;
      }

      if (r.dailyMassAvailability && r.dailyMassAvailability.length > 0 && !r.dailyMassAvailability.includes('N√£o posso')) {
        comMissasDiarias++;
      } else {
        semMissasDiarias++;
      }

      if (r.preferredMassTimes && r.preferredMassTimes.length > 0) {
        comHorarioPreferido++;
      }
    }

    console.log(`\nDomingos:`);
    console.log(`   ‚úÖ Com disponibilidade: ${comDomingos}`);
    console.log(`   ‚ùå Sem disponibilidade: ${semDomingos}`);

    console.log(`\nMissas di√°rias:`);
    console.log(`   ‚úÖ Com disponibilidade: ${comMissasDiarias}`);
    console.log(`   ‚ùå Sem disponibilidade: ${semMissasDiarias}`);

    console.log(`\nHor√°rios preferidos:`);
    console.log(`   ‚úÖ Informaram prefer√™ncia: ${comHorarioPreferido}`);

    console.log('\n\nüö® PROBLEMA IDENTIFICADO:');
    console.log('=' .repeat(80));
    console.log(`
A l√≥gica atual est√° EXCLUINDO ministros que n√£o marcaram disponibilidade,
mas os dados mostram que:

1. Os ministros RESPONDERAM ao question√°rio
2. Eles marcaram disponibilidades espec√≠ficas (ex: Roberta s√≥ √†s 8h)
3. O campo availableSundays pode conter datas espec√≠ficas como "05/10", "12/10", etc
4. O campo preferredMassTimes cont√©m hor√°rios como "8h", "10h", "19h"

‚ùå ERRO: A l√≥gica est√° procurando por "Domingo 05/10" mas pode estar "05/10"
‚ùå ERRO: Est√° excluindo quem n√£o respondeu, mesmo tendo respostas no banco

‚úÖ SOLU√á√ÉO: Ajustar a l√≥gica para:
   1. Considerar diferentes formatos de data
   2. Verificar preferredMassTimes para hor√°rios
   3. N√£o excluir automaticamente quem tem resposta no banco
    `);

  } catch (error) {
    console.error('‚ùå Erro:', error);
  }

  process.exit(0);
}

checkRealOctoberData();